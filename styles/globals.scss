// use BEM principal in writing CSS properties
// B = Block
// E = Element
// M = Modifier
@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@400;700;900&display=swap");
html,
body {
	padding: 0;
	margin: 0;
	line-height: 1;
	font-family: "Roboto", sans-serif;
	color: #202020;
	background-color: #fafafa;
	font-smooth: always;
}
html {
	block-size: border-box;
}
*,
*::before,
*::after {
	box-sizing: initial;
	// outline: 1px solid green;
}
$generic-box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 4px 11px;
$generic-border: 1px solid #f1f1f1;
$generic-bg: #db4c3f;
button {
	border: none;
	background: none;
	background-color: transparent;
	cursor: pointer;
}
@mixin box-overlay() {
	box-shadow: $generic-box-shadow;
	position: absolute;
	width: 100%;
	z-index: 1;
	top: 90px;
	border-radius: 3px;
}
@mixin va($va-align: center) {
	display: flex;
	align-items: center;
	@if $va-align != center {
		justify-content: left;
	} @else {
		justify-content: center;
	}
}
@mixin no-select {
	user-select: none;
	-webkit-touch-callout: none;
	-moz-user-select: none;
	-ms-user-select: none;
}

@mixin btn($width) {
	width: $width;
	background-color: $generic-bg;
	color: #fff;
	border: 1px solid transparent;
	margin-right: 5px;
	margin-top: 10px;
	font-weight: bold;
	font-size: 13px;
	line-height: 17px;
	padding: 6px 12px 7px 12px;
	position: relative;
	display: inline-block;
	white-space: nowrap;
	border-radius: 3px;
	text-decoration: none;
	text-align: center;
	cursor: pointer;
}
@mixin cancel() {
	cursor: pointer;
	color: #555;
	font-size: 14px;
	margin: 2px 5px;
}
@mixin task-item() {
	list-style-type: none;
	display: flex;
	line-height: 18px;
	color: #333;
	padding-block: 10px;
	font-size: 14px;
	border: 1px solid #f0f0f0;
	padding-left: 10px;
	cursor: pointer;
	&:hover {
		background-color: #f9f9f9;
	}
}
@mixin mq($from) {
	@media (max-width: $from) {
		@content;
	}
}
//41,64,100ems
@mixin breakpoint($size, $direction) {
	@if $size == small {
		@if $direction == up {
			@media (min-width: 41em) {
				@content;
			}
		} @else if $direction == down {
			@media (max-width: 41em) {
				@content;
			}
		} @else {
			@media (min-width: 0) and (max-width: 41em) {
				@content;
			}
		}
	} @else if $size == medium {
		@if $direction == up {
			@media (min-width: 64em) {
				@content;
			}
		} @else if $direction == down {
			@media (max-width: 64em) {
				@content;
			}
		} @else {
			@media (min-width: 41em) and (max-width: 64em) {
				@content;
			}
		}
	} @else if $size == large {
		@if $direction == up {
			@media (min-width: 100em) {
				@content;
			}
		} @else if $direction == down {
			@media (max-width: 100em) {
				@content;
			}
		} @else {
			@media (min-width: 64em) and (max-width: 100em) {
				@content;
			}
		}
	}
}

// main content

.content {
	display: grid;
	grid-template-columns: 266px 1fr;
	max-width: 992px;
	margin: auto;
	@include mq("600px") {
		grid-template-columns: 1fr;
	}
}

//emoji picker input
.input-element {
	height: 35px;
	width: 100%;
	display: flex;
	align-items: center;
	border: 2px solid #ddd;
	border-radius: 2px;
	justify-content: flex-start;
	.add-message__content {
		width: calc(100% - 32px);
		height: 100%;
		border: none;
		background-color: white !important;
		padding-left: 10px;
		padding-right: 10px;
	}
	label {
		background-color: #cacbcd;
		padding: 5px;
		.svg {
			height: 20px;
			width: 30px;
		}
	}
}

.add-task__shallow,
.add-project {
	@include no-select;
	cursor: pointer;
	margin-block: 20px;
}

.add-task__plus,
.add-project__plus {
	color: #dd4b39;
	font-size: 18px;
	font-weight: bold;
	cursor: pointer;
}
.add-task__text,
.add-project__text {
	display: inline-block;
	color: #545454;
	font-size: 14px;
	margin-left: 15px;
	cursor: pointer;
}

@import "sidebar";
@import "header";
@import "project";
@import "task";
